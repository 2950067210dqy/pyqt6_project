# Form implementation generated from reading ui file 'table_tab0.ui'
#
# Created by: PyQt6 UI code generator 6.9.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtWidgets
from PyQt6.QtWidgets import QVBoxLayout, QWidget, QHBoxLayout, QScrollArea

from config.global_setting import global_setting
from theme.ThemeManager import Charts_Style_Name
from ui.customize_ui.tab2_tab0_charts_single_column import BarChartWindow
from ui.customize_ui.tab2_tab0_charts_single_line import tab2_tab0_charts_single_line


class tab2_tab0_charts():

    def __init__(self, datas, title: str = "", parent: QVBoxLayout = None, object_name: str = ""):
        """

        :param parent:父组件
        :param title 图表title
        :param object_name:图表objectName
        :param charts_type:图表类型
        :param datas :数据
        :param is_span:图表是否平滑
        """
        super().__init__()
        self.title = title
        # 主题颜色
        self.theme = global_setting.get_setting("theme_manager").get_charts_style()
        # 当前样式名
        self.theme_name = Charts_Style_Name.NORMAL.value

        # 数据
        self.datas = datas
        self.transfer_datas = None
        self.charts = []
        # obejctName
        self.object_name = object_name
        # 父布局
        self.parent_layout = parent

        self._init_ui()

    def _init_ui(self):
        # 添加滑动条区域
        # 创建滚动区域
        main_layout = QVBoxLayout(self.parent_layout)
        scroll_area_left_bottom = QScrollArea()
        scroll_area_left_bottom.setWidgetResizable(True)  # 使滚动区域内容自适应大小
        # 滚动区域的内容widget和布局
        scroll_content_left_bottom = QWidget()
        sub_layout = QVBoxLayout(scroll_content_left_bottom)
        sub_layout.setObjectName(f"layout_sub")
        chart = BarChartWindow(datas=self.datas, parent=sub_layout,
                               object_name=self.parent_layout.objectName(), title=f"{self.title}")

        self.charts.append(chart)
        scroll_content_left_bottom.setLayout(sub_layout)
        # 把内容widget设置到滚动区域
        scroll_area_left_bottom.setWidget(scroll_content_left_bottom)
        # 将滚动区域添加到主布局
        main_layout.addWidget(scroll_area_left_bottom)
        pass

    def _init_ui_BACUKP(self):
        # 主布局，3个子图（行） 3行4列 每个单元格再有两个图表

        main_layout = QHBoxLayout(self.parent_layout)

        for i in range(len(self.transfer_datas)):  # 3个相角

            # 添加滑动条区域
            # 创建滚动区域
            scroll_area_left_bottom = QScrollArea()
            scroll_area_left_bottom.setWidgetResizable(True)  # 使滚动区域内容自适应大小
            # 滚动区域的内容widget和布局
            scroll_content_left_bottom = QWidget()
            current_data_label_title = QtWidgets.QLabel(parent=scroll_content_left_bottom)
            current_data_label_title.setText(
                f"相角{self.datas.data[i].rated_phase_angle}{self.datas.data[i].rated_phase_angle_unit}")

            current_data_label_title.setGeometry(QtCore.QRect(0, 0, 80, 20))
            current_data_label_title.setObjectName("current_data_config_title")
            # 每个子图横向放两个小图
            sub_layout = QHBoxLayout(scroll_content_left_bottom)
            sub_layout.setObjectName(f"layout_{i}")

            for j in range(len(self.transfer_datas[i])):  # 4个 数据项

                temp_data = self.transfer_datas[i][j]
                result_data = temp_data[0][0]  # result数据
                error_data = temp_data[1][0][0]  # error数据
                result_data.append(error_data)

                chart = tab2_tab0_charts_single_line(
                    datas=result_data,
                    parent=sub_layout, object_name=sub_layout.objectName(),
                    title="", is_span=True)
                self.charts.append(chart)

                pass

            scroll_content_left_bottom.setLayout(sub_layout)
            # 把内容widget设置到滚动区域
            scroll_area_left_bottom.setWidget(scroll_content_left_bottom)
            # 将滚动区域添加到主布局
            main_layout.addWidget(scroll_area_left_bottom)
            # main_layout.addLayout(sub_layout)
